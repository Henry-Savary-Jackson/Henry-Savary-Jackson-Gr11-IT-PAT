unit Login_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Data.Win.ADODB, Vcl.Dialogs, Vcl.StdCtrls,
  Vcl.ExtCtrls, DMUnit_u, Utils_u;

type
  TfrmLogin = class(TForm)
    edtUsername: TEdit;
    edtPassword: TEdit;
    btnSignIn: TButton;
    btnSignUp: TButton;
    lblUsername: TLabel;
    lblPassword: TLabel;
    Image1: TImage;
    lblAppTitle: TLabel;
    lblSignUp: TLabel;
    procedure btnSignInClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnSignUpClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure cmbUserChange(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmLogin: TfrmLogin;
  fSupervisors: TextFile;
  arrOrganiserID: array of string;

const
  fileName = 'Supervisors.txt';
  specialChars = '!@#$%^&*()=+{}[]:;",.<>?/\|';

implementation

uses
  Main_u,
  SignUp_u;

{$R *.dfm}

procedure TfrmLogin.btnSignInClick(Sender: TObject);
var
  sUsername, sPassword: string;
  iUser: integer;
begin
  with DataModule1 do
  begin
    iUser := cmbUser.ItemIndex;

    sUsername := edtUsername.Text;

    // validate Username

    if sUsername = '' then
    begin
      showMessage('Please enter your username.');
      Exit;
    end
    else
    begin
      case iUser of

        0:
          begin
            if util.isInTable(OrganiserTB, 'OrganiserName', sUsername) = false
            then
            begin
              showMessage('Username doesn"t exist.');
              Exit;
            end;

          end;

        1:
          begin
            if util.isInTable(SupervisorTB, 'SupervisorName', sUsername) = false
            then
            begin
              showMessage('Username doesn"t exist.');
              Exit;
            end;

          end;
      else
        begin
          showMessage('Please select your role.');
          Exit;
        end;

      end;

    end;

    sPassword := edtPassword.Text;

    case iUser of
      // checks whether password is correct
      0:
        if not(OrganiserTB['Password'] = sPassword) then
        begin
          showMessage('Incorrect Password.');
          Exit;
        end;

      1:
        if not(SupervisorTB['Password'] = sPassword) then
        begin
          showMessage('Incorrect Password.');
          Exit;
        end;

    end;

    // send data over to main screen
    case iUser of
      0:
        frmMain.sID := OrganiserTB['OrganiserID'];
      1:
        frmMain.sID := SupervisorTB['SupervisorID'];
    end;
    frmMain.iUser := iUser;
    frmMain.sUsername := sUsername;

    // Naviguate to main screen
    frmLogin.Hide;
    frmMain.Show;

  end;

end;

procedure TfrmLogin.btnSignUpClick(Sender: TObject);

begin
frmLogin.Hide;
frmSignUp.Show;
end;

procedure TfrmLogin.cmbUserChange(Sender: TObject);
begin
  //
  if cmbUser.ItemIndex = 1 then
  begin
    lblOrganiser.Show;
    cmbOrganiser.Show;
  end
  else
  begin
    lblOrganiser.Hide;
    cmbOrganiser.Hide;
  end;
end;

procedure TfrmLogin.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  // saveInfo();
  Application.Terminate;
end;

procedure TfrmLogin.FormShow(Sender: TObject);
var
  I: integer;
begin
  // set up title
  lblAppTitle.Caption := 'CAPE TOWN' + #13 + ' SOCCER TOURNAMENT ' + #13 +
    'PLANNER';

  // add user organiser combo box
  if not(cmbUser.ItemIndex = 1) then
  begin
    lblOrganiser.Hide;
    cmbOrganiser.Hide;
  end;
  // open tables
  with DataModule1 do
  begin
    OrganiserTB.Open;
    SupervisorTB.Open;

    // add all organisers to organiser combo box
    OrganiserTB.First;
    // sets length of array to number of records
    cmbOrganiser.Items.Clear;
    SetLength(arrOrganiserID, OrganiserTB.RecordCount);
    I := 0;
    while not OrganiserTB.Eof do
    begin
      cmbOrganiser.Items.Add(OrganiserTB['OrganiserName']);
      arrOrganiserID[I] := OrganiserTB['OrganiserID'];;
      I := I + 1;
      OrganiserTB.Next;
    end;

  end;

end;

end.
