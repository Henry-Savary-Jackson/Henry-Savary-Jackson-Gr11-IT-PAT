unit Tournament_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls, DMUnit_u,
  Utils_u, Math;

type
  TfrmTournament = class(TForm)
    lstAllocations: TListBox;
    cmbRound: TComboBox;
    redTeams: TRichEdit;
    btnBack: TButton;
    btnBeginTournament: TButton;
    procedure lstAllocationsClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnBackClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure displayAllocs();
    procedure cmbRoundChange(Sender: TObject);
    procedure btnBeginTournamentClick(Sender: TObject);
    procedure makeFixtures(arr : TArray<string>; Round: integer);
    procedure saveTournament();
  private
    { Private declarations }
  public
    { Public declarations }
    sID: string;
    iUser, iNumRounds: integer;
    bBegin: boolean;
  end;

var
  frmTournament: TfrmTournament;
  // these dynamic arrays allow for all the relevant data
  // to be retrieved once a user accesses frmMatch
  // by storing the MatchIDs and AllocIDs in parallel.
  arrMatchID, arrAllocID, arrWB, arrLB: TArray<string>;
  util: Utils;
  iRound: integer;
  fTournament: TextFile;

const
  fileName = 'Tournament.txt';

implementation

uses
  Match_u,
  Main_u;

{$R *.dfm}

procedure TfrmTournament.btnBackClick(Sender: TObject);
begin
  frmMain.Show;
  frmTournament.Hide;
end;

procedure TfrmTournament.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Application.Terminate;
end;

procedure TfrmTournament.FormShow(Sender: TObject);
var
  I: integer;
begin
  // open tables
  with DataModule1 do
  begin
    MatchTB.Open;
    MatchAllocTB.Open;
    TeamTB.Open;

    // add rounds to the combo box

    // TODO: FIX
    cmbRound.Items.Clear;
    for I := 1 to iNumRounds do
    begin
      cmbRound.Items.Add(intToStr(I));
    end;

    // update list box
    displayAllocs();

    // populate wb and lb
    TeamTB.First;
    while not TeamTB.Eof do
    begin
      case TeamTB['NumLost'] of
        0:
          begin
            util.insertElement<string>(arrWB, TeamTB['TeamName']);
          end;
        1:
          begin
            util.insertElement<string>(arrLB, TeamTB['TeamName']);
          end;
      end;

      TeamTB.Next;
    end;

  end;

end;

procedure TfrmTournament.lstAllocationsClick(Sender: TObject);
var
  Index: integer;
begin
  case lstAllocations.ItemIndex of
    - 1:
    else
    begin
      with DataModule1 do
      begin
        // passes selected MatchID and associated AllocIDs to Match Screen
        index := lstAllocations.ItemIndex;
        frmMatch.matchID := arrMatchID[index];
        setLength(frmMatch.arrAllocID, 2);
        frmMatch.arrAllocID[0] := arrAllocID[index * 2];
        frmMatch.arrAllocID[1] := arrAllocID[(index * 2) + 1];
        frmMatch.iUser := iUser;
        frmMatch.sID := sID;

        frmMatch.Show;
        frmTournament.Hide;

      end;
    end;
  end;
end;

procedure TfrmTournament.makeFixtures(arr: TArray<string>; Round: integer);
var
  arrTeams, arrByes: TArray<string>;
  arrMatchTeams: array [0 .. 1] of string;
  dDate: TDateTIme;
  sMatchID, sAllocID: string;
  I, J, iHighestPower, iByes, iTeams, iPower: integer;
begin
  //
  with DataModule1 do
  begin
    iTeams := 0;
    iByes := 0;

    dDate := Date;

    for I := 0 to length(arr)-1 do

    while not TeamTB.Eof do
    begin

      // add teams in winner's bracket
      if TeamTB['NumLost'] = 0 then
      begin
        if (util.goToRecord(MatchAllocTB, 'TeamName', TeamTB['TeamName']) = 1)
          and (MatchAllocTB['MatchID'] = '') then
        begin
          iByes := iByes + 1;
          util.insertElement<string>(arrByes, TeamTB['TeamName']);
        end
        else
        begin
          iTeams := iTeams + 1;
          util.insertElement<string>(arrTeams, TeamTB['TeamName']);

        end;
      end;
      TeamTB.Next;
    end;

    TeamTB.First;
    MatchAllocTB.First;

    iPower := 1;
    while iTeams + iByes - power(2, iPower) >= 0 do
    begin
      iPower := iPower + 1;
    end;
    iHighestPower := Round(power(2, iPower - 1));

    I := 0;
    while I < iHighestPower / 2 do
    begin
      dDate := dDate + 4;

      // check byes first
      if I <= iByes - 1 then
      begin
        arrMatchTeams[0] := arrTeams[I];
        arrMatchTeams[1] := arrByes[I];
      end
      else
      begin
        arrMatchTeams[0] := arrTeams[2 * I];
        arrMatchTeams[1] := arrTeams[2 * I + 1];
      end;

      // Generate unique primary key

      Repeat
      begin
        sMatchID := UpCase(sTeamOne[1]) + UpCase(sTeamTwo[1]) +
          intToStr(random(10));
      end
      until not util.isInTable(MatchTB, 'MatchID', sMatchID);

      MatchTB.Last;
      MatchTB.insert;
      MatchTB['MatchID'] := sMatchID;
      MatchTB.Edit;
      MatchTB['Location'] := 'Idk';
      MatchTB.Edit;
      MatchTB['MatchDate'] := dDate;
      MatchTB.Edit;
      MatchTB['Round'] := Round;

      // create matchalloc records
      for J := 0 to 1 do
      begin
        repeat
          sAllocID := UpCase(arrMatchTeams[J][1]) + intToStr(random(10)) +
            intToStr(random(10));
        until not util.isInTable(MatchAllocTB, 'AllocID', sAllocID);

        MatchAllocTB.Last;
        MatchAllocTB.insert;

        MatchAllocTB['AllocID'] := sAllocID;
        MatchAllocTB['TeamName'] := arrMatchTeams[J];
        MatchAllocTB['Won'] := false;
        MatchAllocTB['Score'] := 0;
        MatchAllocTB['MatchID'] := sMatchID;

      end;

      I := I + 1;
    end;

    // create Records for byes
    while I < iTeams do
    begin
      repeat
        sAllocID := UpCase(arrTeams[I][1]) + intToStr(random(10)) +
          intToStr(random(10));
      until not util.isInTable(MatchAllocTB, 'AllocID', sAllocID);

      MatchAllocTB.Last;
      MatchAllocTB.insert;

      MatchAllocTB['AllocID'] := sAllocID;
      MatchAllocTB['TeamName'] := arrTeams[I];
      MatchAllocTB['Won'] := false;
      MatchAllocTB['Score'] := 0;
      MatchAllocTB['MatchID'] := '';
    end;

    // Update DB
    MatchAllocTB.Edit;
    MatchAllocTB.Post;
    MatchAllocTB.Refresh;
    MatchAllocTB.First;

    MatchTB.Edit;
    MatchTB.Post;
    MatchTB.Refresh;
    MatchTB.First;

  end;

end;

procedure TfrmTournament.btnBeginTournamentClick(Sender: TObject);
var
  arrTeams: TArray<string>;
  dDate: TDateTIme;
  sMatchID, sAllocID: string;
  I, J, iHighestPower, iByes, iTeams, iPower: integer;
begin
  iRound := 1;
  makeFixtures(iRound);

  btnBeginTournament.Enabled := false;

  saveTournament();
end;

procedure TfrmTournament.cmbRoundChange(Sender: TObject);
begin
  displayAllocs();
end;

procedure TfrmTournament.displayAllocs();
var
  I, J: integer;
  sItem: string;
  dDate: TDateTIme;
begin
  //
  if not(cmbRound.ItemIndex = -1) then
  begin
    with DataModule1 do
    begin
      // check textfile
      iRound := 1;
      if not(cmbRound.ItemIndex = -1) then
        iRound := strToInt(cmbRound.Items[cmbRound.ItemIndex]);

      lstAllocations.Items.Clear;

      // query for matchID that are in the selected round
      setLength(arrMatchID, 0);
      setLength(arrAllocID, 0);

      MatchTB.First;
      I := 0;
      while not MatchTB.Eof do
      begin

        if MatchTB['Round'] = iRound then
        begin
          setLength(arrMatchID, length(arrMatchID) + 1);
          arrMatchID[I] := MatchTB['MatchID'];

          dDate := MatchTB['MatchDate'];

          // Loops through the two allocations related to a match record
          // in order to create a list box item
          // This also makes it possible for the list box item to give relevant
          // data to frmMatch
          setLength(arrAllocID, length(arrMatchID) * 2);
          MatchAllocTB.First;

          sItem := '';

          util.goToRecord(MatchAllocTB, 'MatchID', arrMatchID[I]);
          arrAllocID[(2 * I)] := MatchAllocTB['AllocID'];
          sItem := sItem + MatchAllocTB['TeamName'] + ' vs ';
          util.goToNextRecord(MatchAllocTB, 'MatchID', arrMatchID[I]);
          arrAllocID[(2 * I) + 1] := MatchAllocTB['AllocID'];
          sItem := sItem + MatchAllocTB['TeamName'] + ' on ' + DateToStr(dDate);

          lstAllocations.Items.Add(sItem);

          I := I + 1;
        end;
        MatchTB.Next;
      end;
      MatchTB.First;
      MatchAllocTB.First;

    end;

  end;

end;

// Save the state of the tournament to a text file
procedure TfrmTournament.saveTournament();
begin
  AssignFile(fTournament, fileName);

  ReWrite(fTournament);
  if bBegin then
  begin
    Writeln(fTournament, 'Begun: T');
  end
  else
    Writeln(fTournament, 'Begun: F');

  Writeln(fTournament, 'CurrentRound: ' + intToStr(iNumRounds));

  CloseFile(fTournament);

end;

end.
