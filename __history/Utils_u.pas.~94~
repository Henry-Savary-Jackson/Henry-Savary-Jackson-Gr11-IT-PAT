unit Utils_u;

interface

// This is a class meant for containing functions/methods used throughout
// the applications.
uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Data.Win.ADODB, DMUnit_u, Vcl.Dialogs;

type
  Utils = class

  public
    { public declarations }
    function isInTable(table: TADOTable; field: string; val: Variant): boolean;
    function containsSpecialChar(str: string): boolean;
    function containsDigit(str: string): boolean;
    procedure goToRecord(table: TADOTable; pk: string; val: Variant);
    procedure goToRecordAfter(table: TADOTable; field: string; val: Variant;
      iOccurences: integer);

  end;

var
  util: Utils;

const
  specialChars = '!@#$%^&*()=+{}[]:;",.<>?/\|';
  digits = '0123456789';

implementation

{$J+}

// this function loops in an ado table to check whether a record whose field has
// a particular value exists
function Utils.isInTable(table: TADOTable; field: string; val: Variant)
  : boolean;
begin
  Result := false;

  with DataModule1 do
  begin
    table.First;

    while not table.Eof do
    begin
      if table[field] = val then
      begin
        Result := true;
        Exit;
      end;
      table.Next;

    end;

  end;

end;

// this function checks whether a given string has atleast one special character
function Utils.containsSpecialChar(str: string): boolean;
var
  I: integer;
begin
  Result := false;
  for I := 1 to Length(specialChars) do
  begin
    if not(pos(specialChars[I], str) = 0) then
    begin
      Result := true;
      Exit;
    end;
  end;

end;

procedure goToRecordAfter(table: TADOTable; field: string; val: Variant;
  iOccurences: integer);
  var
  I : integer;
  begin
     with DataModule1 do
    begin
      table.First;
      I := 0;
      while (I < iOccurences) do
      begin
        if table.Eof then
        begin
          ShowMessage('No such record');
          Exit;
        end;
        if table[field] = val then
        begin
          I := I +1;
        end;
        table.Next;

      end;
      //ShowMessage('Could not find record.');

    end;
  end;

  procedure Utils.goToRecord(table: TADOTable; pk: string; val: Variant);
  begin
    // Sets pointer to record with specified primary key value
    with DataModule1 do
    begin
      table.First;

      while not table.Eof do
      begin
        if table[pk] = val then
        begin
          Exit;
        end;
        table.Next;

      end;
      ShowMessage('Could not find record.');

    end;
  end;

  function Utils.containsDigit(str: string): boolean;
  var
    I: integer;
  begin
    Result := false;
    for I := 1 to Length(digits) do
    begin
      if not(pos(digits[I], str) = 0) then
      begin
        Result := true;
        Exit;
      end;

    end;

  end;

end.
