unit Login_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Data.Win.ADODB, Vcl.Dialogs, Vcl.StdCtrls,
  Vcl.ExtCtrls, DMUnit_u;

type
  TfrmLogin = class(TForm)
    edtUsername: TEdit;
    edtPassword: TEdit;
    btnSignIn: TButton;
    cmbUser: TComboBox;
    btnSignUp: TButton;
    lblUsername: TLabel;
    lblPassword: TLabel;
    Image1: TImage;
    lblAppTitle: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure btnSignInClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnSignUpClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure saveInfo();
    function isInTable(table: TADOTable; field: string; val: Variant): Boolean;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmLogin: TfrmLogin;
  fSupervisors: TextFile;

const
  fileName = 'Supervisors.txt';
  specialChars = '!@#$%^&*()=+{}[]:;",.<>?/\|';

implementation

uses
  Main_u;

{$R *.dfm}

procedure TfrmLogin.btnSignInClick(Sender: TObject);
var
  sUsername, sPassword: string;
  iUser: integer;
begin
  iUser := cmbUser.ItemIndex;

  sUsername := edtUsername.Text;

  if sUsername = '' then
  begin
    showMessage('Please enter your username.');
    Exit;
  end
  else
  begin
    with DataModule1 do
    begin
      case iUser of

        0:
          begin
            if isInTable(OrganiserTB, 'OrganiserTB', sUsername) = false then
            begin
              showMessage('Username doesn"t exist.');
              Exit;
            end;

          end;

        1:
          begin
            if isInTable(SupervisorTB, 'SupervisorName', sUsername) = false then
            begin
              showMessage('Username doesn"t exist.');
              Exit;
            end;

          end;

      end;

    end;
  end;

  with DataModule1 do
  begin
    case iUser of

      0:
        if not OrganiserTB['Password'] = sPassword then
        begin
          showMessage('Incorrect Password.')
        end;

      1:
        if not SupervisorTB['Password'] = sPassword then
        begin
          showMessage('Incorrect Password.');
        end;

    end;

    // send data over to main screen
    case iUser of
      0:
        frmMain.sID := OrganiserTB['OrganiserID'];
      1:
        frmMain.sID := SupervisorTB['SupervisorID'];
    end;
    frmMain.iUser := iUser;
    frmMain.sUsername := sUsername;
    frmLogin.Hide;
    frmMain.Show;

  end;
end;

procedure TfrmLogin.btnSignUpClick(Sender: TObject);
var
  sUsername, sPassword, sLine: string;
  iUser, I: integer;
begin
  iUser := cmbUser.ItemIndex;

  sUsername := edtUsername.Text;

  if sUsername = '' then
  begin
    showMessage('Please enter your username.');
    Exit;
  end
  else if iUser = 1 then
  begin
    if not FileExists(fileName) then
    begin
      showMessage('Error: cannot find list of supervisors.');
      Exit;
    end;

    AssignFile(fSupervisors, fileName);

    Reset(fSupervisors);

    while not Eof(fSupervisors) do
    begin
      Readln(fSupervisors, sLine);
      if sLine = sUsername then
      begin
        Break;
      end;
    end;

    showMessage('You are not registered as a supervisor.');
    Exit;

  end;

  sPassword := edtPassword.Text;

  if sPassword = '' then
  begin
    showMessage('Please enter a password.');
  end
  else if sPassword < 8 then
  begin
    showMessage('Your password must be at least 8 characters long.')
  end
  else if sPassword > 15 then
  begin
    showMessage('Your password cannot be over 15 characters.');
  end
  else
  begin
    for I := 1 to length(specialChars) do
    begin
      if not pos(specialChars[I], sPassword) = -1 then
      begin
        showMessage('Your password must have at least one special character');
        Exit;
      end;
    end;

  end;

  with DataModule1 do
  begin
    case iUser of
      0:
        begin
          OrganiserTB.Last;
          OrganiserTB.Insert;

          //generate unique ID

          OrganiserTB['OrganiserName'] := sUserName;
        end;

    end;
  end;

  frmLogin.Hide;
  frmMain.Show;
end;

procedure TfrmLogin.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  saveInfo();
  Application.Terminate;
end;

procedure TfrmLogin.FormCreate(Sender: TObject);
begin
  //
  lblAppTitle.Caption := 'CAPE TOWN' + #13 + ' SOCCER TOURNAMENT ' + #13 +
    'PLANNER';
end;

procedure TfrmLogin.FormShow(Sender: TObject);
begin
  with DataModule1 do
  begin
    OrganiserTB.Open;
    SupervisorTB.Open;
  end;

end;

procedure TfrmLogin.saveInfo();
begin
  with DataModule1 do
  begin
    OrganiserTB.Post;
    OrganiserTB.Refresh;

    SupervisorTB.Post;
    SupervisorTB.Refresh;
  end;
end;

function TfrmLogin.isInTable(table: TADOTable; field: string;
  val: Variant): Boolean;
begin
  Result := false;

  with DataModule1 do
  begin
    table.First;

    while not table.Eof do
    begin
      if table[field] = val then
      begin
        Result := true;
        Exit;
      end;
      table.Next;

    end;

  end;

end;

end.
