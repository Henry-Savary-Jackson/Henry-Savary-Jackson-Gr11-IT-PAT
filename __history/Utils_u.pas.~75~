unit Utils_u;

interface

// This is a class meant for containing functions/methods used throughout
// the applications.
uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Data.Win.ADODB, DMUnit_u, Vcl.Dialogs;

type
  Utils = class
  funcRef =
    function(val: variant): boolean
    begin
    end;

  public
    { public declarations }
    function isInTable(table: TADOTable; field: string; val: Variant): boolean;
    function containsSpecialChar(str: string): boolean;
    function query(table: TADOTable; outField: string; inField: string;
      funcRef): TArray<Variant>;
    procedure goToRecord(table: TADOTable; pk: string; val: Variant);

  end;

var
  util: Utils;

const
  specialChars = '!@#$%^&*()=+{}[]:;",.<>?/\|';

implementation

{$J+}

// this function loops in an ado table to check whether a record whose field has
// a particular value exists
function Utils.isInTable(table: TADOTable; field: string; val: Variant)
  : boolean;
begin
  Result := false;

  with DataModule1 do
  begin
    table.First;

    while not table.Eof do
    begin
      if table[field] = val then
      begin
        Result := true;
        Exit;
      end;
      table.Next;

    end;

  end;

end;

// this function checks whether a given string has atleast one special character
function Utils.containsSpecialChar(str: string): boolean;
var
  I: integer;
begin
  Result := false;
  for I := 1 to Length(specialChars) do
  begin
    if not(pos(specialChars[I], str) = 0) then
    begin
      Result := true;
      Exit;
    end;
  end;

end;

procedure Utils.goToRecord(table: TADOTable; pk: string; val: Variant);
begin
  // Sets pointer to record with specified primary key value
  with DataModule1 do
  begin
    table.First;

    while not table.Eof do
    begin
      if table[pk] = val then
      begin
        Exit;
      end;
      table.Next;

    end;
    ShowMessage('Could not find record.');

  end;
end;

// function to takes a table, a condition(TPredicate), a field to analyze as Input.
// as output, it return an array of fields
function Utils.query(table: TADOTable; outField: string;
  inField: string; f : reference to function): TArray<Variant>;
var
  iSize, I: integer;
begin
  table.First;
  iSize := 0;
  I := 0;
  while not table.Eof do
  begin

    if f(table[inField]) then
    begin
      setLength(Result, iSize + 1);
      Result[I] := table[outField];
    end;
    table.Next;
  end;

  table.First;

end;

end.
