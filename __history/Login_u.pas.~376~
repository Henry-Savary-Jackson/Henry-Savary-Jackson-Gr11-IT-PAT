unit Login_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Data.Win.ADODB, Vcl.Dialogs, Vcl.StdCtrls,
  Vcl.ExtCtrls, DMUnit_u, Utils_u;

type
  TfrmLogin = class(TForm)
    edtUsername: TEdit;
    edtPassword: TEdit;
    btnSignIn: TButton;
    cmbUser: TComboBox;
    btnSignUp: TButton;
    lblUsername: TLabel;
    lblPassword: TLabel;
    Image1: TImage;
    lblAppTitle: TLabel;
    cmbOrganiser: TComboBox;
    lblOrganiser: TLabel;
    procedure btnSignInClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnSignUpClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure cmbUserChange(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmLogin: TfrmLogin;
  fSupervisors: TextFile;
  arrOrganiserID: array of string;

const
  fileName = 'Supervisors.txt';
  specialChars = '!@#$%^&*()=+{}[]:;",.<>?/\|';

implementation

uses
  Main_u;

{$R *.dfm}

procedure TfrmLogin.btnSignInClick(Sender: TObject);
var
  sUsername, sPassword: string;
  iUser: integer;
begin
  with DataModule1 do
  begin
    iUser := cmbUser.ItemIndex;

    sUsername := edtUsername.Text;

    // validate Username

    if sUsername = '' then
    begin
      showMessage('Please enter your username.');
      Exit;
    end
    else
    begin
      case iUser of

        0:
          begin
            if util.isInTable(OrganiserTB, 'OrganiserName', sUsername) = false
            then
            begin
              showMessage('Username doesn"t exist.');
              Exit;
            end;

          end;

        1:
          begin
            if util.isInTable(SupervisorTB, 'SupervisorName', sUsername) = false
            then
            begin
              showMessage('Username doesn"t exist.');
              Exit;
            end;

          end;
      else
        begin
          showMessage('Please select your role.');
          Exit;
        end;

      end;

    end;

    case iUser of
      // checks whether password is correct
      0:
        if not(OrganiserTB['Password'] = sPassword) then
        begin
          showMessage('Incorrect Password.');
          Exit;
        end;

      1:
        if not(SupervisorTB['Password'] = sPassword) then
        begin
          showMessage('Incorrect Password.');
          Exit;
        end;

    end;

    // send data over to main screen
    case iUser of
      0:
        frmMain.sID := OrganiserTB['OrganiserID'];
      1:
        frmMain.sID := SupervisorTB['SupervisorID'];
    end;
    frmMain.iUser := iUser;
    frmMain.sUsername := sUsername;

    // Naviguate to main screen
    frmLogin.Hide;
    frmMain.Show;

  end;

end;

procedure TfrmLogin.btnSignUpClick(Sender: TObject);
var
  sUsername, sID, sPassword, sLine: string;
  iUser: integer;
  bRegistered: boolean;
begin
  iUser := cmbUser.ItemIndex;

  sUsername := edtUsername.Text;

  // validate username length
  if sUsername = '' then
  begin
    showMessage('Please enter your username.');
    Exit;
  end
  else if Length(sUsername) > 30 then
  begin
    showMessage('Username shouldn"t be longer than 30 characters.')
  end
  else if iUser = 1 then
  begin
    // verify , given a user is supervisor, that they are in the regitered supervisors
    // text file.
    if not FileExists(fileName) then
    begin
      showMessage('Error: cannot find list of supervisors.');
      Exit;
    end;

    AssignFile(fSupervisors, fileName);

    Reset(fSupervisors);
    bRegistered := false;

    while not Eof(fSupervisors) do
    begin
      Readln(fSupervisors, sLine);
      if sLine = sUsername then
      begin
        bRegistered := true;
        Break;
      end;
    end;

    if not bRegistered then
    begin
      showMessage('You are not registered as a supervisor.');
      Exit;
    end;

  end
  else
  begin
    // validate against already existing username

    case iUser of
      0:
        if util.isInTable(DataModule1.OrganiserTB, 'OrganiserName', sUsername)
        then
        begin
          showMessage('Username already exists.');
          Exit;
        end;
      1:
        if util.isInTable(DataModule1.SupervisorTB, 'SupervisorName', sUsername)
        then
        begin
          showMessage('Username already exists.');
          Exit;
        end;

    else
      begin
        showMessage('Please select your role.');
        Exit;
      end;

    end;
    DataModule1.OrganiserTB.First;
    DataModule1.SupervisorTB.First;

  end;

  sPassword := edtPassword.Text;

  // validate password
  if sPassword = '' then
  begin
    showMessage('Please enter a password.');
    Exit;
  end
  // Ensure that password is the correct length
  else if Length(sPassword) < 8 then
  begin
    showMessage('Your password must be at least 8 characters long.');
    Exit;
  end
  else if Length(sPassword) > 15 then
  begin
    showMessage('Your password cannot be over 15 characters.');
    Exit;
  end;

  if util.containsSpecialChar(sPassword) then
  begin
    // check whether password has at least one special character
    showMessage('Your password must contain atleast one special character.');
    Exit;

  end;

  with DataModule1 do
  begin

    if iUser = 0 then
    begin
      // set ADOTable to insert

      // generate unique ID

      sID := UpCase(sUsername[1]) + intToStr(random(10));
      // Ensure generated ID is not already in table
      while util.isInTable(OrganiserTB, 'OrganiserID', sID) do
      begin
        sID := UpCase(sUsername[1]) + intToStr(random(10));
      end;

      // insert record
      // set ADOTable to insert
      OrganiserTB.Last;
      OrganiserTB.Insert;
      // insert record
      OrganiserTB['OrganiserID'] := sID;
      // add username and password
      OrganiserTB['OrganiserName'] := sUsername;
      OrganiserTB['Password'] := sPassword;

      OrganiserTB.Post;
      OrganiserTB.Refresh;

    end
    else
    begin

      // generate unique ID

      sID := UpCase(sUsername[1]) + intToStr(random(10)) + intToStr(random(10));

      // Ensure generated ID is not already in table
      while util.isInTable(SupervisorTB, 'SupervisorID', sID) do
      begin
        sID := UpCase(sUsername[1]) + intToStr(random(10)) +
          intToStr(random(10));
      end;

      // set ADOTable to insert
      SupervisorTB.Last;
      SupervisorTB.Insert;

      // insert record
      SupervisorTB['SupervisorID'] := sID;

      // add username and password
      SupervisorTB['SupervisorName'] := sUsername;
      SupervisorTB['Password'] := sPassword;

      // insert user's Organiser
      if cmbOrganiser.ItemIndex = -1 then
      begin
        showMessage('Please select your organiser.');
        Exit;
      end;
      SupervisorTB['OrganiserID'] := arrOrganiserID[cmbOrganiser.ItemIndex];

      SupervisorTB.Post;
      SupervisorTB.Refresh;
    end;
  end;

  // send data to main screen
  frmMain.iUser := iUser;
  frmMain.sUsername := sUsername;
  frmMain.sID := sID;

  // open main screen
  frmLogin.Hide;
  frmMain.Show;
end;

procedure TfrmLogin.cmbUserChange(Sender: TObject);
begin
  //
  if cmbUser.ItemIndex = 1 then
  begin
    lblOrganiser.Show;
    cmbOrganiser.Show;
  end
  else
  begin
    lblOrganiser.Hide;
    cmbOrganiser.Hide;
  end;
end;

procedure TfrmLogin.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  // saveInfo();
  Application.Terminate;
end;

procedure TfrmLogin.FormShow(Sender: TObject);
var
  I: integer;
begin
  // set up title
  lblAppTitle.Caption := 'CAPE TOWN' + #13 + ' SOCCER TOURNAMENT ' + #13 +
    'PLANNER';

  // add user organiser combo box
  lblOrganiser.Hide;
  cmbOrganiser.Hide;
  // open tables
  with DataModule1 do
  begin
    OrganiserTB.Open;
    SupervisorTB.Open;

    // add all organisers to organiser combo box
    OrganiserTB.First;
    // sets length of array to number of records
    cmbOrganiser.Items.Clear;
    SetLength(arrOrganiserID, OrganiserTB.RecordCount);
    I := 0;
    while not OrganiserTB.Eof do
    begin
      cmbOrganiser.Items.Add(OrganiserTB['OrganiserName']);
      arrOrganiserID[I] := OrganiserTB['OrganiserID'];;
      I := I + 1;
      OrganiserTB.Next;
    end;

  end;

end;

end.
